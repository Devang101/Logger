// var data = [
//   {id: 1, author: "Pete Hunt", text: "This is one Log"},
//   {id: 2, author: "Jordan Walke", text: "This is *another* Log"}
// ];

var LogList = React.createClass({
  render: function() {
    var LogNodes = this.props.data.map(function(Log) {
      return (
        <div id={log.id} key={Log.id}>
          Timestamp={Log.Timestamp}<br/>
          EventType={Log.EventType}<br/>
          EventSeverity={Log.EventSeverity}<br/>
          Message={Log.Message}<br/>
          id={Log.id}<br/>
        </div>
      );
    });
    return (
      <div className="LogList">
        {LogNodes}
      </div>
    );
  }
});

var LogRemoveForm = React.createClass({
  getInitialState: function(){
    return {id: ''};
  },
  handleIDchange: function(e){
    this.setState({id : e.target.value});
  },
  handleSubmit: function(e){
    e.preventDefault();
    var id = this.state.id.trim();
    if (!id) {
      return;
    }
    ReactDOM.unmountComponentAtNode(document.getElementById({id}));
    // this.props.onLogRemoveSubmit({id:id});
    this.setState({id: ''});
  },
  render: function(){
    return(
      <form className='Remove' onSubmit={this.handleSubmit}>
        <input type='text' placeholder="Log id" value ={this.state.id} onChange={this.handleIDchange}/>
        <input type="submit" value="Remove"/>
      </form>
    )
  }
});

var LogForm = React.createClass({
  getInitialState: function() {
    return {EventType: '', EventSeverity: '', Message: ''};
  },
  handleEventTypeChange: function(e) {
    this.setState({EventType: e.target.value});
  },
  handleEventSeverityChange: function(e) {
    this.setState({EventSeverity: e.target.value});
  },
  handleMessageChange: function(e) {
    this.setState({Message: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var today = new Date();
    var Timestamp = today.toString();
    var EventType = this.state.EventType.trim();
    var EventSeverity = this.state.EventSeverity.trim();
    var Message = this.state.Message.trim();
    if (!Timestamp || !EventType || !EventSeverity || !Message) {
      return;
    }
    this.props.onLogSubmit({Timestamp: Timestamp, EventType: EventType, EventSeverity: EventSeverity, Message:Message});
    this.setState({EventType: '', EventSeverity: '', Message: ''});
  },
  render: function() {
    return (
      <form className='LogFrom' onSubmit={this.handleSubmit}>
        <input type='text' placeholder="EventType" value ={this.state.EventType} onChange={this.handleEventTypeChange}/>
        <input type='text' placeholder="EventSeverity" value ={this.state.EventSeverity} onChange={this.handleEventSeverityChange}/>
        <input type='text' placeholder="Message" value ={this.state.Message} onChange={this.handleMessageChange}/>
        <input type="submit" value="Post"/>
      </form>
    );
  }
});

// var Log = React.createClass({
//   render: function(){
//     return(
//       <div className = 'Log'>
//           {this.props.Timestamp} {this.props.EventType} {this.props.EventSeverity} {this.props.Message}
//       </div>
//     );
//   }
// });

var LogBox = React.createClass({
  loadLogsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleLogSubmit: function(Log) {
    var Logs = this.state.data;
     // Optimistically set an id on the new Log. It will be replaced by an
     // id generated by the server. In a production application you would likely
     // not use Date.now() for this and would have a more robust system in place.
     Log.id = Date.now();
     var newLogs = Logs.concat([Log]);
     this.setState({data: newLogs});

   $.ajax({
     url: this.props.url,
     dataType: 'json',
     type: 'POST',
     data: Log,
     success: function(data) {
       this.setState({data: data});
     }.bind(this),
     error: function(xhr, status, err) {
       this.setState({data: Logs});
       console.error(this.props.url, status, err.toString());
     }.bind(this)
   });
 },


 // handleRemoveSubmit: function(Log) {
 //   var Logs = this.state.data;
 //   var newLogs = Logs.map(function(Log_entry) {
 //     if (Log.id.equals(Log_entry.id))
 //     {
 //       var index = Logs.indexOf(Log_entry)
 //       if (index > -1) {
 //         Logs.splice(index, 1);
 //       }
 //     }
 //   });
 //    this.setState({data: newLogs});
 //
 //  $.ajax({
 //    url: this.props.url,
 //    dataType: 'json',
 //    type: 'POST',
 //    data: Log,
 //    success: function(data) {
 //      this.setState({data: data});
 //    }.bind(this),
 //    error: function(xhr, status, err) {
 //      this.setState({data: Logs});
 //      console.error(this.props.url, status, err.toString());
 //    }.bind(this)
 //  });
 // },

  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadLogsFromServer();
    setInterval(this.loadLogsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="LogBox">
        <h1>Logs</h1>
        <LogList data={this.state.data} />
         <LogForm onLogSubmit={this.handleLogSubmit} />
         <LogRemoveForm data={this.state.data}/>
      </div>
    );
  }
});

ReactDOM.render(
  <LogBox url="/api/comments" pollInterval={2000} />,
  document.getElementById('content')
);
